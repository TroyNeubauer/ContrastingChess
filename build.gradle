plugins {
    id "application"
}

apply plugin : "java"

group 'com.troy.chess'
version '0.1.0'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

}

test {
    useJUnitPlatform()
}

ext {
    javaMainClass = "com.troy.chess.Main"
}

application {
    mainClassName = javaMainClass
}


task cargoTest(type:Exec) {
    def homePath = System.properties['user.home']

    commandLine "${homePath}.cargo/bin/cargo"
    args "test", "--manifest-path=./GigaChess/Cargo.toml"
}

test.dependsOn cargoTest

def String outputFile

task cargoBuild(type:Exec) {
    executable "cargo"
    args "build", "--manifest-path=./GigaChess/Cargo.toml"

    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
        outputFile = "target/debug/giga_chess.dll"
    } else {
        outputFile = "target/debug/libgiga_chess.so"
    }
}


compileJava.dependsOn cargoBuild


task cargoBuildWindows(type:Exec) {
    def homePath = System.properties['user.home']

    commandLine "${homePath}.cargo/bin/cargo"
    args "build", "--target", "x86_64-pc-windows-gnu", "--manifest-path=./GigaChess/Cargo.toml"
}

task copyNativesJar(type: Copy) {

}

jar {

    manifest {
        attributes "Main-Class": application.mainClassName
    }
}

task fatJar(type: Jar) {

    manifest {
        attributes "Main-Class": application.mainClassName
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

fatJar.dependsOn copyNativesJar
copyNativesJar.dependsOn cargoBuildWindows

/*
    task cargoBuildAppleX86(type:Exec) {
        def homePath = System.properties['user.home']

        commandLine "${homePath}.cargo/bin/cargo"
        args "build", "--target", "x86_64-apple-darwin", "--manifest-path=./GigaChess/Cargo.toml"
    }

    jar.dependsOn cargoBuildAppleX86
*/


